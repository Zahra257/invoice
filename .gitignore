# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
function GenerateInvoice() {
  var date = new Date();
  const dd = {
    content: 
    [
  
                  {
                      columns: [{
                        style: 'tableExample',
  layout: 'customHorizontalLines',
  table: {
      // headers are automatically repeated if the table spans over multiple pages
      // you can declare how many rows should be treated as headers
      headerRows: 1,
      widths: ["16%", "16%", "16%", "16%", "16%", "*"],
      body: [
          [{ text: 'REFERENCE', style: 'tableHeader' }, { text: 'DESCRIPTION', style: 'tableHeader' }, { text: 'QUANTITE', style: 'tableHeader' }, { text: 'PRIX_UNITAIRE', style: 'tableHeader' }, { text: 'MONTANT', style: 'tableHeader' }],
      // [  `${'-'}` ,`${this.props.items.item.name} - ${this.props.items.item.description}`,`${this.props.items.item.QUANTITE}`, `${this.props.items.item.PRIX_UNITAIRE}`, `${this.props.items.item.PRIX_UNITAIRE * this.props.items.item.QUANTITE}` ]
      ["5000", "4500", "5100", "1500", "9600",],
      ["5000", "4500", "5100", "1500", "9600",],
       ["5000", "4500", "5100", "1500", "9600",],
        ["5000", "4500", "5100", "1500", "9600",],
      ["5000", "4500", "5100", "1500", "9600",]
    ]
    }
  }]
}
    ],

 
styles: {

normal: {
fontSize: 10,

margin: [0, 0, 0, 10],
lineHeight: 1.25
},

header: {
fontSize: 12,
bold: true,
margin: [0, 0, 0, 10],
lineHeight: 1.25
}


}
}


pdfMake.tableLayouts = {


customHorizontalLines: {
hLineWidth: function (i, node) {
if (i === 0 || i === node.table.body.length) {
    return 1;
}
return (i === node.table.headerRows) ? 1 : 0;
},
vLineWidth: function (i, node) {
return 1;
},
hLineColor: function (i, node) {
return (i === 0 || i === node.table.body.length) ? 'gray' : 'gray';
},
vLineColor: function (i, node) {
return (i === 0 || i === node.table.widths.length) ? 'gray' : 'gray';
},

paddingLeft: function (i) {
return 8;
},
paddingRight: function (i, node) {
return 8;
},
paddingTop: function (i, node) {
return 8;
},
paddingBottom: function (i, node) {
return 8;
},
}
};                      
pdfMake.createPdf(dd).download('asd.pdf');

